<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://ostendorf.com/</id>
  <title>Ostendorf Software</title>
  <updated>2013-05-31T13:54:00Z</updated>
  <author>
    <name>Karl Ostendorf</name>
    <email>karl@ostendorf.com</email>
    <uri>https://ostendorf.com/</uri>
  </author>
  <rights>Copyright Â© 2014 - Karl Ostendorf</rights>
  <link rel="self" href="https://ostendorf.com/feed.xml"/>
  <entry>
    <id>urn:uuid:5ef45f9c-98c2-46da-864c-cccb662594cd</id>
    <link rel="alternate" href="https://ostendorf.com/2013/05/angular-localize-service"/>
    <author>
      <name>Karl Ostendorf</name>
      <email>karl@ostendorf.com</email>
      <uri>https://ostendorf.com/</uri>
    </author>
    <title>angularjs localization service for multiple modules</title>
    <updated>2013-05-31T13:54:00Z</updated>
    <summary type="html">&lt;pre&gt;&lt;code&gt;services.factory(&amp;#39;localize&amp;#39;, [&amp;#39;$q&amp;#39;, &amp;#39;$http&amp;#39;, &amp;#39;$rootScope&amp;#39;, &amp;#39;$window&amp;#39;, function ($q, $http, $rootScope, $window) {&lt;/code&gt;&lt;/pre&gt;</summary>
    <content type="html">&lt;pre&gt;&lt;code&gt;services.factory(&amp;#39;localize&amp;#39;, [&amp;#39;$q&amp;#39;, &amp;#39;$http&amp;#39;, &amp;#39;$rootScope&amp;#39;, &amp;#39;$window&amp;#39;, function ($q, $http, $rootScope, $window) {    // determine language    var _lang = localStorage.openrouter_lang;    if (_lang == &amp;#39;undefined&amp;#39; || _lang == null || _lang == &amp;#39;&amp;#39;) {        _lang = $window.navigator.userLanguage || $window.navigator.language;        if (_lang) {            _lang = _lang.substr(0, 2);        } else {            _lang = &amp;#39;en&amp;#39;;        }    }    var _list = $rootScope.config.modules;    _list.unshift(&amp;#39;common&amp;#39;); // add common module to list    var _loading = false;    function load_resource_file(module, lang) {        var d = $q.defer();        var url = &amp;#39;app/&amp;#39; + module + &amp;#39;/&amp;#39; + module + &amp;#39;-&amp;#39; + lang + &amp;#39;.json&amp;#39;;        $http({ method:&amp;#39;GET&amp;#39;, url:url, cache:false })            .success(function (data) {                d.resolve(data);            })            .error(function() {                url = &amp;#39;app/&amp;#39; + module + &amp;#39;/&amp;#39; + module + &amp;#39;-en.json&amp;#39;;                $http({ method:&amp;#39;GET&amp;#39;, url:url, cache:false })                    .success(function (data) {                        d.resolve(data);                    })                    .error(function() {                        d.resolve({});                    });            });        return d.promise;    }    function initLocalizedResources() {        if (_loading) return;        _loading = true;        // load http promises to requests array        var requests = [];        angular.forEach(_list, function(value, key) {            var promise = load_resource_file(value, localize.language);            requests.push(promise);        });        $q.all(requests)            .then(function(responses) {                var dictionary = {};                angular.forEach(responses, function(data) {                    angular.extend(dictionary, data);                });                return dictionary;            })            .then(function(dict) {                localize.dictionary = dict;                localize.loaded = true;                _loading = false;                $rootScope.$broadcast(&amp;#39;localizeResourcesUpdates&amp;#39;);            });    }    var localize = {        dictionary:{},        language:_lang,        loaded: false,        changeLanguage:function(lang) {            if (!localize.loaded || localize.language != lang) {                localize.language = lang;                localStorage.openrouter_lang = lang;                initLocalizedResources();            }        },        getLocalizedString:function (value) {            if (!localize.loaded) {                initLocalizedResources();            }            return localize.dictionary[value];        }    };    // return the local instance when called    return localize;} ]);&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  <entry>
    <id>urn:uuid:c10b045c-b452-49ef-a440-c79df6dafe7e</id>
    <link rel="alternate" href="https://ostendorf.com/2012/12/textonly-mode-kvm"/>
    <author>
      <name>Karl Ostendorf</name>
      <email>karl@ostendorf.com</email>
      <uri>https://ostendorf.com/</uri>
    </author>
    <title>KVM text-only mode</title>
    <updated>2012-12-19T16:48:00Z</updated>
    <summary type="html">&lt;p&gt;Just some notes on how to run Ubuntu (or any Linux distro that uses grub) as a KVM virtual machine in text-only mode.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Just some notes on how to run Ubuntu (or any Linux distro that uses grub) as a KVM virtual machine in text-only mode.&lt;/p&gt;&lt;h2&gt;Step 1: Adjust Grub&lt;/h2&gt;&lt;p&gt;Modify /etc/default/grub as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet splash&amp;quot; // comment out to prevent ubuntu purple screenGRUB_TERMINAL=console  // uncomment for text-based grub menu&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After saving run &lt;code&gt;sudo update-grub&lt;/code&gt; to apply the changes.&lt;/p&gt;&lt;h2&gt;Step 2: Set the keyboard layout to plain US&lt;/h2&gt;&lt;p&gt;I prepare my images by going through the install using VNC. After the install my keyboard is set to PC105, de, nodeadkeys. This works great while using VNC but after connecting via SSH it is no longer necessary, and when pressing 'Z', I get a 'Y'. Changing the keyload back to US resolves the problem.&lt;/p&gt;&lt;p&gt;Modify /etc/default/keyboard as follows:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;XKBMODEL=&amp;quot;pc105&amp;quot;XKBLAYOUT=&amp;quot;us&amp;quot;XKBVARIANT=&amp;quot;&amp;quot;XKBOPTIONS=&amp;quot;&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After saving run &lt;code&gt;sudo setupcon&lt;/code&gt; to apply the changes.&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>urn:uuid:a31c8b85-7ff0-45dc-b85f-0275749957f6</id>
    <link rel="alternate" href="https://ostendorf.com/2012/12/bootable-usb"/>
    <author>
      <name>Karl Ostendorf</name>
      <email>karl@ostendorf.com</email>
      <uri>https://ostendorf.com/</uri>
    </author>
    <title>Creating a bootable USB stick on Mac OSX</title>
    <updated>2012-12-03T10:57:00Z</updated>
    <summary type="html">&lt;p&gt;Just for future reference:&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Just for future reference:&lt;/p&gt;&lt;h2&gt;Convert the ISO image&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;hdiutil convert -format UDRW -o newimage.img image.iso&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Make the USB stick bootable&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;sudo fdisk /dev/disk2flag 1writequit&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Flash the image to the USB stick&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;sudo echodd bs=1m if=newimage.img | pv -trab | sudo dd bs=1m of=/dev/DISK-DEVICE&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;DISK-DEVICE will probably be rdisk2&lt;/p&gt;&lt;h2&gt;Eject disk&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;sudo diskutil eject /dev/diskN&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;See &lt;a href="http://www.ubuntu.com/download/help/create-a-usb-stick-on-mac-osx"&gt;How to create a bootable USB stick on OS X&lt;/a&gt; for more information.&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>urn:uuid:94ef1aaf-6790-4695-aca2-15f3b4ccfea0</id>
    <link rel="alternate" href="https://ostendorf.com/2012/11/java-native"/>
    <author>
      <name>Karl Ostendorf</name>
      <email>karl@ostendorf.com</email>
      <uri>https://ostendorf.com/</uri>
    </author>
    <title>JNI, JNA and JNR - Java access to native libraries</title>
    <updated>2012-11-05T17:52:00Z</updated>
    <summary type="html">&lt;p&gt;Last week I tried to find a Java library to let me access native functions to let me change the current user running a program. The native function, &lt;a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setuid.2.html"&gt;setuid&lt;/a&gt;, is part of the standard C library on Linux and many other *nixes as well as OS X. It allows a program to be started as root, perform a privileged function such as opening a port below 1024 and then by "dropping privileges" to continue operation as a normal user.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Last week I tried to find a Java library to let me access native functions to let me change the current user running a program. The native function, &lt;a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setuid.2.html"&gt;setuid&lt;/a&gt;, is part of the standard C library on Linux and many other *nixes as well as OS X. It allows a program to be started as root, perform a privileged function such as opening a port below 1024 and then by "dropping privileges" to continue operation as a normal user.&lt;/p&gt;&lt;p&gt;I didn't find just one library to do this, I found three, each using a different method to access native library functions. The three methods, &lt;a href="http://en.wikipedia.org/wiki/Java_Native_Interface" title="Java Native Interface"&gt;JNI&lt;/a&gt;, &lt;a href="https://github.com/twall/jna#readme" title="Java Native Access"&gt;JNA&lt;/a&gt; and a new community development &lt;a href="https://github.com/jnr/" title="Java Native Runtime"&gt;JNR&lt;/a&gt;, each have their own strengths so none are redundant.&lt;/p&gt;&lt;p&gt;The JNI library, &lt;a href="http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/tree/jetty-setuid"&gt;jetty-setuid&lt;/a&gt;, from the Jetty project, neatly mavenized, compiled straightaway on OS X after a few tweaks to the POM to correct updated module names. However, it didn't build properly on Linux and after an hour of making adjustments to the POM I decided to throw in the towel. The JNI library compiled just fine from the command line, but either the Maven native plugin or its settings in the POM were broken. Additionally, I would prefer a JNA solution so that don't have to install an extra native library on my production systems.&lt;/p&gt;&lt;p&gt;In any case, isn't JNI overkill for a single call to setuid? Yes, JNI is fast but it's not as if we're calling native functions in a loop for CPU-intensive computations. So thankfully the &lt;a href="http://repo1.maven.org/maven2/org/jruby/ext/posix/jna-posix/1.0.3/"&gt;jna-posix&lt;/a&gt; project offers a JNA library to do just the same thing. The problem with this library is however that it is no longer being actively maintained. Part of the JRuby project, its developers have moved on to develop, &lt;a href="https://github.com/jnr/jnr-posix"&gt;jnr-posix&lt;/a&gt; a new version of the same code based on a new technology called JNR. JNR, &lt;a href="http://cdn.oreillystatic.com/en/assets/1/event/61/JRuby_%20Pushing%20the%20Java%20Platform%20Further%20Presentation.pdf"&gt;unveiled by @headius last year at OSCON&lt;/a&gt;, aims to be faster than JNA yet easier to program than JNI. My problem with JNR is the long list of dependencies it will add to a project: 5 JNR jars and 5 jars from the &lt;a href="http://asm.ow2.org/"&gt;ASM project&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Faced with the dilemma of using JNI, and being forced to install a native library on my production systems; JNA, but using a project no longer maintained; or JNR, and adding numerous dependencies to my project that I don't need or want - I did the sensible thing and &lt;a href="https://github.com/kwo/jsetuid"&gt;rolled my own JNA solution&lt;/a&gt;. See below, it's very easy:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;import com.sun.jna.Native;public class LibC {    static {       Native.register(&amp;quot;c&amp;quot;);    }    public static native int getuid();    public static native int setuid(int uid);    public static native int getgid();    public static native int setgid(int gid);    public static native Passwd getpwnam(String login);    public static native int umask(int mask);    private LibC() {    }}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;My only dependency besides my two classes is JNA, (a single JAR) available via Maven and under active development. Tested on OS X and Linux (Debian Squeeze) it works flawlessly.&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>urn:uuid:e24f904e-fee3-4028-83af-d6be7d75bc7c</id>
    <link rel="alternate" href="https://ostendorf.com/2012/09/raspberry-pi"/>
    <author>
      <name>Karl Ostendorf</name>
      <email>karl@ostendorf.com</email>
      <uri>https://ostendorf.com/</uri>
    </author>
    <title>Raspberry Pi with Arch Linux</title>
    <updated>2012-09-30T18:27:00Z</updated>
    <summary type="html">&lt;p&gt;Here are some notes on how I configured my &lt;a href="http://www.raspberrypi.org/"&gt;Raspberry Pi&lt;/a&gt; to run &lt;a href="http://www.archlinux.org/"&gt;Arch Linux&lt;/a&gt;.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;Here are some notes on how I configured my &lt;a href="http://www.raspberrypi.org/"&gt;Raspberry Pi&lt;/a&gt; to run &lt;a href="http://www.archlinux.org/"&gt;Arch Linux&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In addition to the Raspberry Pi itself, you'll need the following to get running:&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;SD card, 4 GB, class 4 or higher.&lt;/li&gt;  &lt;li&gt;micro USB cable&lt;/li&gt;  &lt;li&gt;USB charger (TODO, mine is capable of 800mA).&lt;/li&gt;  &lt;li&gt;Ethernet cable&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Load image onto SD Card&lt;/h2&gt;&lt;p&gt;&lt;a href="http://www.raspberrypi.org/downloads"&gt;Download the Arch Linux image&lt;/a&gt; and &lt;a href="http://elinux.org/RPi_Easy_SD_Card_Setup"&gt;load it onto the SD card&lt;/a&gt;. Install &lt;code&gt;pv&lt;/code&gt; if you don't have it already to monitor the progress of the loading procedure:&lt;/p&gt;&lt;p&gt;Instead of loading the image onto the SD as recommended:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sudo dd bs=1m if=archlinux-hf-2012-09-18.img of=/dev/DISK-DEVICE&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;use pipeviewer instead to monitor the progress:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sudo echodd bs=1m if=archlinux-hf-2012-09-18.img | pv -trab | sudo dd bs=1m of=/dev/DISK-DEVICE&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Execute a simple command per &lt;code&gt;sudo&lt;/code&gt; before starting so that you are not prompted for a password during the operation as that can ruin the timing.&lt;/p&gt;&lt;h2&gt;Power Up&lt;/h2&gt;&lt;p&gt;Insert the SD card, attach the Ethernet cable, connect the USB cable to the charger and watch the board boot up. The IP address will be requested via DHCP so use your router to see if you can find which address was assigned. Then ssh into the RPi as root, using the password of 'root'.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;ssh -l root IP-ADDRESS&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You're in! And since we're running Arch, one of the first things to do is to update the system:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# pacman -Syu&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;set the hostname:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# echo kobold &amp;gt; /etc/hostname&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;set the timezone (or not):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# rm /etc/localtime# ln -s /usr/share/zoneinfo/Europe/Berlin localtime&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;restart:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;# sync# reboot&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next: Configuring WiFi&lt;/p&gt;</content>
  </entry>
  <entry>
    <id>urn:uuid:700b174d-a0fd-4c09-890d-24fed008a3a6</id>
    <link rel="alternate" href="https://ostendorf.com/2010/08/atmel-raven"/>
    <author>
      <name>Karl Ostendorf</name>
      <email>karl@ostendorf.com</email>
      <uri>https://ostendorf.com/</uri>
    </author>
    <title>Programming the Atmel RZRaven</title>
    <updated>2010-08-10T20:29:00Z</updated>
    <summary type="html">&lt;p&gt;The &lt;a href="http://www.atmel.com/dyn/products/tools_card.asp?tool_id=4291"&gt;Atmel RZRaven&lt;/a&gt; AVR boards as well as the USB stick both contain 10-pin, 50-mil JTAG interfaces. The pins must be soldered on by the user but are included in the evaluation kit. An 50-mil to 100-mil adapter allows connecting the JTAG interfaces to programmers.&lt;/p&gt;</summary>
    <content type="html">&lt;p&gt;The &lt;a href="http://www.atmel.com/dyn/products/tools_card.asp?tool_id=4291"&gt;Atmel RZRaven&lt;/a&gt; AVR boards as well as the USB stick both contain 10-pin, 50-mil JTAG interfaces. The pins must be soldered on by the user but are included in the evaluation kit. An 50-mil to 100-mil adapter allows connecting the JTAG interfaces to programmers.&lt;/p&gt;&lt;p&gt;The Raven boards but not the Raven stick also include 6-pin, 50-mil ISP interfaces. The pins for these must be soldered on as well but no 6-pin units are shipped with the evaluation set. However, as they are only header pins, the 10-pin units that ship with the evaluation set can be broken off to create 6-pin units. (See &lt;a href="http://www.outsidetrains.com/raven/"&gt;link&lt;/a&gt;, search for "ISP connectors").&lt;/p&gt;&lt;p&gt;The ISP interfaces on the Raven boards are faulty; VCC and GND are not connected for the 1284P MCU. Atmel has suggested a workaround by jumping those pins to the VCC and GND pins for the 3290P ISP header. (See &lt;a href="http://code.rancidbacon.com/LearningAboutAtmelRZRAVEN"&gt;link&lt;/a&gt;, search for "7 July 2008"). The Raven stick does not contain an ISP interface at all, however, clever hacking can change that. See &lt;a href="http://www.outsidetrains.com/raven/"&gt;here&lt;/a&gt; (search for "USB stick") and &lt;a href="http://ossmann.blogspot.com/2010/01/killerbee-on-budget.html"&gt;here&lt;/a&gt; for more information.&lt;/p&gt;&lt;p&gt;To summarize, it is possible to use a cheap ISP programmer with the Raven boards yet the USB stick will require quite a hack. Nevertheless it is possible and has been done before.&lt;/p&gt;&lt;p&gt;To use JTAG to program the Raven boards and stick, the header pins included with the evaluation kit must be soldered on. JTAG programmers can be expensive. The &lt;a href="http://www.atmel.com/dyn/products/tools_card.asp?tool_id=3353"&gt;AVR JTAGICE mkII&lt;/a&gt; programmer goes for around &lt;a href="http://de.farnell.com/atmel/atjtagice2/development-kit-debug-tool-jtagice/dp/9171100"&gt;265â¬&lt;/a&gt;. Clones are cheaper, for example the &lt;a href="http://www.olimex.com/dev/avr-isp500.html"&gt;Olimex AVRISP-500&lt;/a&gt;, and while the clones don't allow debugging more importantly they do not support all AVR chips. The &lt;a href="http://www.atmel.com/dyn/products/tools_card.asp?tool_id=3891"&gt;AVR Dragon&lt;/a&gt; goes for around &lt;a href="http://de.farnell.com/atmel/atavrdragon/emulator-programmer-f-avr/dp/1455088"&gt;50â¬&lt;/a&gt; and supports JTAG. &lt;del&gt;The debugging capabilities are artificially limited to the first 32kb of an application so as not to cannibalize sales of the JTAGICE mkII.&lt;/del&gt; &lt;a href="http://www.avrfreaks.net/index.php?name=PNphpBB2&amp;amp;file=viewtopic&amp;amp;t=90228"&gt;The dragon also supports debugging now on all AVR chips&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The Dragon seems the best choice. It supports the most &lt;a href="http://www.avrfreaks.net/index.php?name=PNphpBB2&amp;amp;file=viewtopic&amp;amp;t=38691"&gt;programming methods&lt;/a&gt; but it needs to be &lt;a href="http://www.uchobby.com/index.php/2009/03/02/avr-dragon-getting-started/"&gt;set up&lt;/a&gt; and &lt;a href="http://www.instructables.com/id/Help:-An-Absolute-Beginner-s-Guide-to-8-Bit-AVR-Pr/"&gt;tested&lt;/a&gt; before it will work. &lt;a href="http://www.larsen-b.com/Article/315.html"&gt;Debugging on Linux&lt;/a&gt; is supported. I have also checked that it &lt;a href="http://support.atmel.no/knowledgebase/avrstudiohelp/mergedProjects/AVRDragon/SCKT3100A3.htm"&gt;supports the ATmega1284P&lt;/a&gt;; the AT90USB1287 and ATmega3290P are &lt;a href="http://support.atmel.no/knowledgebase/avrstudiohelp/mergedProjects/AVRDragon/NONDIPS.htm"&gt;off-board targets&lt;/a&gt;. Note that the Dragon differs from the &lt;a href="http://www.atmel.com/dyn/products/tools_card.asp?tool_id=3808"&gt;AVRISP programmer&lt;/a&gt; in that the &lt;a href="http://www.avrfreaks.net/index.php?name=PNphpBB2&amp;amp;file=printview&amp;amp;t=94099&amp;amp;start=0"&gt;ISP pins do not supply power to the target chip&lt;/a&gt;.&lt;/p&gt;</content>
  </entry>
</feed>
