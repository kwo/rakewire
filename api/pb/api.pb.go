// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	PingRequest
	PingResponse
	StatusRequest
	StatusResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PingResponse struct {
	Time int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StatusResponse struct {
	Version   string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	BuildTime int64  `protobuf:"varint,2,opt,name=buildTime" json:"buildTime,omitempty"`
	BuildHash string `protobuf:"bytes,3,opt,name=buildHash" json:"buildHash,omitempty"`
	AppStart  int64  `protobuf:"varint,4,opt,name=appStart" json:"appStart,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*PingRequest)(nil), "pb.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "pb.PingResponse")
	proto.RegisterType((*StatusRequest)(nil), "pb.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "pb.StatusResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for PingService service

type PingServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (PingService_PingClient, error)
}

type pingServiceClient struct {
	cc *grpc.ClientConn
}

func NewPingServiceClient(cc *grpc.ClientConn) PingServiceClient {
	return &pingServiceClient{cc}
}

func (c *pingServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (PingService_PingClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PingService_serviceDesc.Streams[0], c.cc, "/pb.PingService/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServicePingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PingService_PingClient interface {
	Recv() (*PingResponse, error)
	grpc.ClientStream
}

type pingServicePingClient struct {
	grpc.ClientStream
}

func (x *pingServicePingClient) Recv() (*PingResponse, error) {
	m := new(PingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PingService service

type PingServiceServer interface {
	Ping(*PingRequest, PingService_PingServer) error
}

func RegisterPingServiceServer(s *grpc.Server, srv PingServiceServer) {
	s.RegisterService(&_PingService_serviceDesc, srv)
}

func _PingService_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingServiceServer).Ping(m, &pingServicePingServer{stream})
}

type PingService_PingServer interface {
	Send(*PingResponse) error
	grpc.ServerStream
}

type pingServicePingServer struct {
	grpc.ServerStream
}

func (x *pingServicePingServer) Send(m *PingResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.PingService",
	HandlerType: (*PingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _PingService_Ping_Handler,
			ServerStreams: true,
		},
	},
}

// Client API for StatusService service

type StatusServiceClient interface {
	GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type statusServiceClient struct {
	cc *grpc.ClientConn
}

func NewStatusServiceClient(cc *grpc.ClientConn) StatusServiceClient {
	return &statusServiceClient{cc}
}

func (c *statusServiceClient) GetStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/pb.StatusService/GetStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StatusService service

type StatusServiceServer interface {
	GetStatus(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterStatusServiceServer(s *grpc.Server, srv StatusServiceServer) {
	s.RegisterService(&_StatusService_serviceDesc, srv)
}

func _StatusService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(StatusServiceServer).GetStatus(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _StatusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StatusService",
	HandlerType: (*StatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _StatusService_GetStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x95, 0x34, 0x02, 0x7c, 0xa5, 0x7f, 0xb0, 0x10, 0x8a, 0xa2, 0x0e, 0xc8, 0x13, 0x62,
	0x48, 0x51, 0xd9, 0xd8, 0x98, 0x40, 0x4c, 0x55, 0xca, 0xc6, 0xe4, 0x80, 0x15, 0x2c, 0x95, 0xd8,
	0xc4, 0x4e, 0x1f, 0xa0, 0xaf, 0xc0, 0xa3, 0xf1, 0x0a, 0x3c, 0x08, 0xce, 0xb9, 0x6e, 0xda, 0xcd,
	0xdf, 0x77, 0xf7, 0xfd, 0xce, 0x77, 0x40, 0xb8, 0x96, 0xb9, 0x6e, 0x94, 0x55, 0x34, 0xd6, 0x65,
	0x36, 0xab, 0x94, 0xaa, 0xd6, 0x62, 0xee, 0xdc, 0x39, 0xaf, 0x6b, 0x65, 0xb9, 0x95, 0xaa, 0x36,
	0xbe, 0x83, 0x8d, 0x60, 0xb8, 0x94, 0x75, 0x55, 0x88, 0xef, 0x56, 0x18, 0xcb, 0x18, 0x9c, 0x7b,
	0x69, 0xb4, 0xeb, 0x11, 0x94, 0x42, 0x62, 0xe5, 0x97, 0x48, 0xa3, 0xeb, 0xe8, 0x66, 0x50, 0xe0,
	0x9b, 0x4d, 0x60, 0xb4, 0x72, 0x90, 0xd6, 0x84, 0xd0, 0x36, 0x82, 0x71, 0x70, 0x76, 0xb9, 0x14,
	0x4e, 0x37, 0xa2, 0x31, 0x6e, 0x10, 0x46, 0x49, 0x11, 0x24, 0x9d, 0x01, 0x29, 0x5b, 0xb9, 0xfe,
	0x78, 0xed, 0xb0, 0x31, 0x62, 0x7b, 0x63, 0x5f, 0x7d, 0xe6, 0xe6, 0x33, 0x1d, 0x60, 0xb2, 0x37,
	0x68, 0x06, 0x67, 0x5c, 0x6b, 0x37, 0xaa, 0xb1, 0x69, 0x82, 0xd1, 0xbd, 0x5e, 0x2c, 0xfd, 0x22,
	0x2b, 0xd1, 0x6c, 0xe4, 0xbb, 0xa0, 0x8f, 0x90, 0x74, 0x92, 0x4e, 0x72, 0x5d, 0xe6, 0x07, 0x1b,
	0x66, 0xd3, 0xde, 0xf0, 0x7f, 0x65, 0x97, 0xdb, 0xdf, 0xbf, 0x9f, 0x78, 0xcc, 0x08, 0x9e, 0x48,
	0xbb, 0xd2, 0x43, 0x74, 0x7b, 0x17, 0x2d, 0xde, 0xc2, 0x9e, 0x81, 0xf9, 0x02, 0xe4, 0x49, 0x58,
	0xef, 0xd1, 0x8b, 0x8e, 0x73, 0x74, 0x87, 0x8c, 0x1e, 0x5a, 0x3b, 0xf8, 0x15, 0xc2, 0xa7, 0x6c,
	0x88, 0x70, 0x83, 0x45, 0x87, 0x2f, 0x4f, 0xf0, 0xfc, 0xf7, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xda, 0x53, 0x8a, 0x12, 0xad, 0x01, 0x00, 0x00,
}
